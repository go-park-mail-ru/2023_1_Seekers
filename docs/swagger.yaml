basePath: /api/v1
definitions:
  errors.JSONError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Folder:
    properties:
      folder_id:
        type: integer
      folder_slug:
        type: string
      messages_count:
        type: integer
      messages_unseen:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  models.FolderResponse:
    properties:
      folder:
        $ref: '#/definitions/models.Folder'
      messages:
        items:
          $ref: '#/definitions/models.MessageInfo'
        type: array
      messages_count:
        type: integer
      messages_unseen:
        type: integer
    type: object
  models.FoldersResponse:
    properties:
      folders:
        items:
          $ref: '#/definitions/models.Folder'
        type: array
    type: object
  models.FormLogin:
    properties:
      login:
        type: string
      password:
        type: string
      remember:
        type: boolean
    required:
    - login
    - password
    - remember
    type: object
  models.FormSignUp:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      repeat_pw:
        description: '?'
        type: string
    required:
    - first_name
    - last_name
    - login
    - password
    - repeat_pw
    type: object
  models.MessageInfo:
    properties:
      created_at:
        type: string
      deleted:
        type: boolean
      favorite:
        type: boolean
      from_user_id:
        $ref: '#/definitions/models.UserInfo'
      message_id:
        type: integer
      recipients:
        items:
          $ref: '#/definitions/models.UserInfo'
        type: array
      seen:
        type: boolean
      text:
        type: string
      title:
        type: string
    type: object
  models.SignInResponse:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.SignUpResponse:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.UserInfo:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
host: localhost:8001
info:
  contact: {}
  title: MailBox Swagger API
  version: "1.0"
paths:
  /folder/{slug}:
    get:
      consumes:
      - application/json
      description: List of folder messages
      parameters:
      - description: FolderSlug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success get list of folder messages
          schema:
            $ref: '#/definitions/models.FolderResponse'
        "400":
          description: failed to get folder messages
          schema:
            $ref: '#/definitions/errors.JSONError'
        "401":
          description: failed get session
          schema:
            $ref: '#/definitions/errors.JSONError'
        "404":
          description: invalid url address
          schema:
            $ref: '#/definitions/errors.JSONError'
      summary: GetFolderMessages
      tags:
      - messages
  /folders/:
    get:
      consumes:
      - application/json
      description: List of outgoing messages
      produces:
      - application/json
      responses:
        "200":
          description: success get list of outgoing messages
          schema:
            $ref: '#/definitions/models.FoldersResponse'
        "400":
          description: failed to get user
          schema:
            $ref: '#/definitions/errors.JSONError'
        "401":
          description: failed get session
          schema:
            $ref: '#/definitions/errors.JSONError'
      summary: GetFolders
      tags:
      - messages
  /logout:
    post:
      consumes:
      - application/json
      description: user log out
      produces:
      - application/json
      responses:
        "200":
          description: success logout
        "401":
          description: failed get session
          schema:
            $ref: '#/definitions/errors.JSONError'
      summary: Logout
      tags:
      - users
  /signin:
    post:
      consumes:
      - application/json
      description: user sign in
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.FormLogin'
      produces:
      - application/json
      responses:
        "200":
          description: user created
          schema:
            $ref: '#/definitions/models.SignInResponse'
        "401":
          description: wrong password
          schema:
            $ref: '#/definitions/errors.JSONError'
        "403":
          description: invalid form
          schema:
            $ref: '#/definitions/errors.JSONError'
        "500":
          description: failed to create session
          schema:
            $ref: '#/definitions/errors.JSONError'
      summary: SignIn
      tags:
      - users
  /signup:
    post:
      consumes:
      - application/json
      description: user sign up
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.FormSignUp'
      produces:
      - application/json
      responses:
        "200":
          description: user created
          schema:
            $ref: '#/definitions/models.SignUpResponse'
        "401":
          description: passwords dont match
          schema:
            $ref: '#/definitions/errors.JSONError'
        "403":
          description: password too short
          schema:
            $ref: '#/definitions/errors.JSONError'
        "409":
          description: user already exists
          schema:
            $ref: '#/definitions/errors.JSONError'
        "500":
          description: failed to create session
          schema:
            $ref: '#/definitions/errors.JSONError'
      summary: SignUp
      tags:
      - users
swagger: "2.0"
