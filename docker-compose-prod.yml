version: "3.8"

services:
  api:
    env_file:
      - .env
    depends_on:
      file_storage:
        condition: service_started
      user:
        condition: service_started
      auth:
        condition: service_started
      mail:
        condition: service_started
    volumes:
      # - ${VENDOR}:/go/pkg/
      - /etc/letsencrypt/live/mailbx.ru:/app/certs
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    command: sh -c "go run ./cmd/api/main.go -config=./cmd/config/prod.yml"
    networks:
      my_network:
        ipv4_address: 172.28.0.2
    ports:
      - "25:25"
      - "8001:8001"
      - "9001:9001"
    restart: "no"
#    restart: always

  db:
    env_file:
      - .env
    image: postgres:latest
    command: [ "postgres",
               "-c", "log_directory=/var/log/postgresql",
               "-c", "logging_collector=on",
               "-c", "log_statement=all" ]
    networks:
      my_network:
        ipv4_address: 172.28.0.3
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
      - ./logs/postgres:/var/log/postgresql
    restart: always

  admin_db:
    env_file:
      - .env
    image: dpage/pgadmin4:latest
    networks:
      my_network:
        ipv4_address: 172.28.0.4
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: always

  cache:
    env_file:
      - .env
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      my_network:
        ipv4_address: 172.28.0.5
    volumes:
      - cache:/data
    restart: always

  file_storage:
    env_file:
      - .env
    volumes:
      # - ${VENDOR}:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/file_storage/Dockerfile
    command: sh -c "./main -config=./cmd/config/prod.yml"
    networks:
      my_network:
        ipv4_address: 172.28.0.7
    ports:
      - "8005:8005"
      - "9003:9003"
    restart: always

  user:
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      file_storage:
        condition: service_started
    volumes:
      # - ${VENDOR}:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/user/Dockerfile
    command: sh -c "./main -config=./cmd/config/prod.yml"
    networks:
      my_network:
        ipv4_address: 172.28.0.8
    ports:
      - "8006:8006"
      - "9005:9005"
    restart: always

  auth:
    env_file:
      - .env
    depends_on:
      user:
        condition: service_started
      cache:
        condition: service_started
    volumes:
      # - ${VENDOR}:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    command: sh -c "./main -config=./cmd/config/prod.yml"
    networks:
      my_network:
        ipv4_address: 172.28.0.9
    ports:
      - "8007:8007"
      - "9002:9002"
    restart: always

  mail:
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      user:
        condition: service_started
    volumes:
      # - ${VENDOR}:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/mail/Dockerfile
    command: sh -c "./main -config=./cmd/config/prod.yml"
    networks:
      my_network:
        ipv4_address: 172.28.0.10
    ports:
      - "8008:8008"
      - "9004:9004"
    restart: always

#  prometheus:
#    image: prom/prometheus:latest
#    networks:
#      my_network:
#        ipv4_address: 172.28.0.16
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--storage.tsdb.retention.time=2d'
#      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#      - '--web.console.templates=/usr/share/prometheus/consoles'
#    volumes:
#      - ./metrics/data/prometheus:/prometheus
#      - ./metrics/config/prometheus/prod:/etc/prometheus
#    ports:
#      - "9090:9090"
#    depends_on:
#      - api
#    restart: always
#
#  node_exporter:
#    image: quay.io/prometheus/node-exporter:latest
#    networks:
#      my_network:
#        ipv4_address: 172.28.0.17
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#      - /:/host:ro,rslave
#    command:
#      - '--path.rootfs=/host'
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - --collector.filesystem.ignored-mount-points
#      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#    user: root
#    privileged: true
#    deploy:
#      mode: global
#    ports:
#      - "9100:9100"
#    restart: always
#
#  grafana:
#    image: grafana/grafana:latest
#    depends_on:
#      - prometheus
#    volumes:
#      - ./metrics/data/grafana:/var/lib/grafana
#      - ./metrics/config/grafana/provisioning:/etc/grafana/provisioning
#      - ./metrics/config/grafana/grafana.ini:/etc/grafana/grafana.ini
#    env_file:
#      - .env
#    ports:
#      - "3000:3000"
#    networks:
#      my_network:
#        ipv4_address: 172.28.0.18
#    restart: always

volumes:
  db_data:
    driver: local
  cache:
    driver: local

networks:
  my_network:
    name: seekers_network
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1