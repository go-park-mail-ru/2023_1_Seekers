// Code generated by MockGen. DO NOT EDIT.
// Source: ../interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Seekers/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseI is a mock of UseCaseI interface.
type MockUseCaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseIMockRecorder
}

// MockUseCaseIMockRecorder is the mock recorder for MockUseCaseI.
type MockUseCaseIMockRecorder struct {
	mock *MockUseCaseI
}

// NewMockUseCaseI creates a new mock instance.
func NewMockUseCaseI(ctrl *gomock.Controller) *MockUseCaseI {
	mock := &MockUseCaseI{ctrl: ctrl}
	mock.recorder = &MockUseCaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseI) EXPECT() *MockUseCaseIMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockUseCaseI) CreateSession(uID uint64) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", uID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUseCaseIMockRecorder) CreateSession(uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUseCaseI)(nil).CreateSession), uID)
}

// DeleteSession mocks base method.
func (m *MockUseCaseI) DeleteSession(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockUseCaseIMockRecorder) DeleteSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUseCaseI)(nil).DeleteSession), sessionID)
}

// GetSession mocks base method.
func (m *MockUseCaseI) GetSession(sessionID string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUseCaseIMockRecorder) GetSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUseCaseI)(nil).GetSession), sessionID)
}

// SignIn mocks base method.
func (m *MockUseCaseI) SignIn(form *models.FormLogin) (*models.AuthResponse, *models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", form)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(*models.Session)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUseCaseIMockRecorder) SignIn(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUseCaseI)(nil).SignIn), form)
}

// SignUp mocks base method.
func (m *MockUseCaseI) SignUp(form *models.FormSignUp) (*models.AuthResponse, *models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", form)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(*models.Session)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUseCaseIMockRecorder) SignUp(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCaseI)(nil).SignUp), form)
}
