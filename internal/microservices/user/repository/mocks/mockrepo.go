// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Seekers/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepoI is a mock of UserRepoI interface.
type MockUserRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoIMockRecorder
}

// MockUserRepoIMockRecorder is the mock recorder for MockUserRepoI.
type MockUserRepoIMockRecorder struct {
	mock *MockUserRepoI
}

// NewMockUserRepoI creates a new mock instance.
func NewMockUserRepoI(ctrl *gomock.Controller) *MockUserRepoI {
	mock := &MockUserRepoI{ctrl: ctrl}
	mock.recorder = &MockUserRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoI) EXPECT() *MockUserRepoIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepoI) Create(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoIMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepoI)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserRepoI) Delete(ID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepoIMockRecorder) Delete(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepoI)(nil).Delete), ID)
}

// EditInfo mocks base method.
func (m *MockUserRepoI) EditInfo(ID uint64, info *models.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInfo", ID, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditInfo indicates an expected call of EditInfo.
func (mr *MockUserRepoIMockRecorder) EditInfo(ID, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInfo", reflect.TypeOf((*MockUserRepoI)(nil).EditInfo), ID, info)
}

// EditPw mocks base method.
func (m *MockUserRepoI) EditPw(ID uint64, newPW string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPw", ID, newPW)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPw indicates an expected call of EditPw.
func (mr *MockUserRepoIMockRecorder) EditPw(ID, newPW interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPw", reflect.TypeOf((*MockUserRepoI)(nil).EditPw), ID, newPW)
}

// GetByEmail mocks base method.
func (m *MockUserRepoI) GetByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepoIMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepoI)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockUserRepoI) GetByID(ID uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepoIMockRecorder) GetByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepoI)(nil).GetByID), ID)
}

// GetInfoByEmail mocks base method.
func (m *MockUserRepoI) GetInfoByEmail(email string) (*models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoByEmail", email)
	ret0, _ := ret[0].(*models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoByEmail indicates an expected call of GetInfoByEmail.
func (mr *MockUserRepoIMockRecorder) GetInfoByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoByEmail", reflect.TypeOf((*MockUserRepoI)(nil).GetInfoByEmail), email)
}

// GetInfoByID mocks base method.
func (m *MockUserRepoI) GetInfoByID(ID uint64) (*models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoByID", ID)
	ret0, _ := ret[0].(*models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoByID indicates an expected call of GetInfoByID.
func (mr *MockUserRepoIMockRecorder) GetInfoByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoByID", reflect.TypeOf((*MockUserRepoI)(nil).GetInfoByID), ID)
}

// IsCustomAvatar mocks base method.
func (m *MockUserRepoI) IsCustomAvatar(ID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomAvatar", ID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomAvatar indicates an expected call of IsCustomAvatar.
func (mr *MockUserRepoIMockRecorder) IsCustomAvatar(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomAvatar", reflect.TypeOf((*MockUserRepoI)(nil).IsCustomAvatar), ID)
}

// SetAvatar mocks base method.
func (m *MockUserRepoI) SetAvatar(ID uint64, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", ID, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockUserRepoIMockRecorder) SetAvatar(ID, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockUserRepoI)(nil).SetAvatar), ID, avatar)
}

// SetCustomAvatar mocks base method.
func (m *MockUserRepoI) SetCustomAvatar(ID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomAvatar", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCustomAvatar indicates an expected call of SetCustomAvatar.
func (mr *MockUserRepoIMockRecorder) SetCustomAvatar(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomAvatar", reflect.TypeOf((*MockUserRepoI)(nil).SetCustomAvatar), ID)
}
