// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Seekers/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFileStorageRepoI is a mock of FileStorageRepoI interface.
type MockFileStorageRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageRepoIMockRecorder
}

// MockFileStorageRepoIMockRecorder is the mock recorder for MockFileStorageRepoI.
type MockFileStorageRepoIMockRecorder struct {
	mock *MockFileStorageRepoI
}

// NewMockFileStorageRepoI creates a new mock instance.
func NewMockFileStorageRepoI(ctrl *gomock.Controller) *MockFileStorageRepoI {
	mock := &MockFileStorageRepoI{ctrl: ctrl}
	mock.recorder = &MockFileStorageRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageRepoI) EXPECT() *MockFileStorageRepoIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFileStorageRepoI) Get(bName, fName string) (*models.S3File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", bName, fName)
	ret0, _ := ret[0].(*models.S3File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileStorageRepoIMockRecorder) Get(bName, fName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileStorageRepoI)(nil).Get), bName, fName)
}

// Upload mocks base method.
func (m *MockFileStorageRepoI) Upload(file *models.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileStorageRepoIMockRecorder) Upload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileStorageRepoI)(nil).Upload), file)
}
