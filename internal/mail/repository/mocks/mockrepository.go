// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2023_1_Seekers/internal/mail (interfaces: RepoI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Seekers/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepoI is a mock of RepoI interface.
type MockRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockRepoIMockRecorder
}

// MockRepoIMockRecorder is the mock recorder for MockRepoI.
type MockRepoIMockRecorder struct {
	mock *MockRepoI
}

// NewMockRepoI creates a new mock instance.
func NewMockRepoI(ctrl *gomock.Controller) *MockRepoI {
	mock := &MockRepoI{ctrl: ctrl}
	mock.recorder = &MockRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoI) EXPECT() *MockRepoIMockRecorder {
	return m.recorder
}

// InsertFolder mocks base method.
func (m *MockRepoI) InsertFolder(arg0 *models.Folder) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFolder", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertFolder indicates an expected call of InsertFolder.
func (mr *MockRepoIMockRecorder) InsertFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFolder", reflect.TypeOf((*MockRepoI)(nil).InsertFolder), arg0)
}

// InsertMessage mocks base method.
func (m *MockRepoI) InsertMessage(arg0 uint64, arg1 *models.MessageInfo, arg2 []models.User2Folder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockRepoIMockRecorder) InsertMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockRepoI)(nil).InsertMessage), arg0, arg1, arg2)
}

// SelectFolderByUserNFolder mocks base method.
func (m *MockRepoI) SelectFolderByUserNFolder(arg0 uint64, arg1 string) (*models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFolderByUserNFolder", arg0, arg1)
	ret0, _ := ret[0].(*models.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFolderByUserNFolder indicates an expected call of SelectFolderByUserNFolder.
func (mr *MockRepoIMockRecorder) SelectFolderByUserNFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFolderByUserNFolder", reflect.TypeOf((*MockRepoI)(nil).SelectFolderByUserNFolder), arg0, arg1)
}

// SelectFolderMessagesByUserNFolder mocks base method.
func (m *MockRepoI) SelectFolderMessagesByUserNFolder(arg0, arg1 uint64) ([]models.MessageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFolderMessagesByUserNFolder", arg0, arg1)
	ret0, _ := ret[0].([]models.MessageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFolderMessagesByUserNFolder indicates an expected call of SelectFolderMessagesByUserNFolder.
func (mr *MockRepoIMockRecorder) SelectFolderMessagesByUserNFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFolderMessagesByUserNFolder", reflect.TypeOf((*MockRepoI)(nil).SelectFolderMessagesByUserNFolder), arg0, arg1)
}

// SelectFoldersByUser mocks base method.
func (m *MockRepoI) SelectFoldersByUser(arg0 uint64) ([]models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFoldersByUser", arg0)
	ret0, _ := ret[0].([]models.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFoldersByUser indicates an expected call of SelectFoldersByUser.
func (mr *MockRepoIMockRecorder) SelectFoldersByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFoldersByUser", reflect.TypeOf((*MockRepoI)(nil).SelectFoldersByUser), arg0)
}

// SelectMessageByUserNMessage mocks base method.
func (m *MockRepoI) SelectMessageByUserNMessage(arg0, arg1 uint64) (*models.MessageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMessageByUserNMessage", arg0, arg1)
	ret0, _ := ret[0].(*models.MessageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMessageByUserNMessage indicates an expected call of SelectMessageByUserNMessage.
func (mr *MockRepoIMockRecorder) SelectMessageByUserNMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMessageByUserNMessage", reflect.TypeOf((*MockRepoI)(nil).SelectMessageByUserNMessage), arg0, arg1)
}

// SelectRecipientsByMessage mocks base method.
func (m *MockRepoI) SelectRecipientsByMessage(arg0, arg1 uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRecipientsByMessage", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRecipientsByMessage indicates an expected call of SelectRecipientsByMessage.
func (mr *MockRepoIMockRecorder) SelectRecipientsByMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRecipientsByMessage", reflect.TypeOf((*MockRepoI)(nil).SelectRecipientsByMessage), arg0, arg1)
}

// UpdateMessageState mocks base method.
func (m *MockRepoI) UpdateMessageState(arg0, arg1 uint64, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageState indicates an expected call of UpdateMessageState.
func (mr *MockRepoIMockRecorder) UpdateMessageState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageState", reflect.TypeOf((*MockRepoI)(nil).UpdateMessageState), arg0, arg1, arg2, arg3)
}
