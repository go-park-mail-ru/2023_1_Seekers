version: "3.8"

services:
  db:
    container_name: postgres
    env_file:
      - .env
    image: postgres:latest
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
#    && psql -U ${POSTGRES_USER} -W ${POSTGRES_PASSWORD} -v db_mail_service_user_pw=${DB_MAIL_SERVICE_USER_PW} -v db_user_service_user_pw=${DB_USER_SERVICE_USER_PW}


    networks:
      my_network:
        ipv4_address: 172.28.0.3
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ./scripts/sql:/docker-entrypoint-initdb.d
      - ./scripts/setup_user_sql:/setup_user_sql
      - ./logs/postgres:/var/log/postgresql
      - ./conf/postgres/postgres_dev.conf:/etc/postgresql/postgresql.conf
    restart: "no"

  admin_db:
    container_name: admin_db
    env_file:
      - .env
    image: dpage/pgadmin4:latest
    networks:
      my_network:
        ipv4_address: 172.28.0.4
    ports:
      - "5050:8080"
    depends_on:
      - db
    restart: "no"

  cache:
    container_name: redis
    env_file:
      - .env
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      my_network:
        ipv4_address: 172.28.0.5
    volumes:
      - cache:/data
    restart: "no"

#  nginx:
#    image: nginx:latest
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#    network_mode: host
##    ports:
##      - "443:443"
##      - "80:80"
#    restart: "no"

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    network_mode: "host"
    #    networks:
    #      my_network:
    #        ipv4_address: 172.28.0.16
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=2d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./metrics/data/prometheus:/prometheus
      - ./metrics/config/prometheus/debug:/etc/prometheus
    #    ports:
    #      - "9090:9090"
    #    depends_on:
    #      - api
    restart: "no"

#  node_exporter:
#    image: quay.io/prometheus/node-exporter:latest
#    networks:
#      my_network:
#        ipv4_address: 172.28.0.17
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#      - /:/host:ro,rslave
#    command:
#      - '--path.rootfs=/host'
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - --collector.filesystem.ignored-mount-points
#      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#    user: root
#    privileged: true
#    deploy:
#      mode: global
#    ports:
#      - "9100:9100"
#    restart: "no"

#  grafana:
#    image: grafana/grafana:latest
#    depends_on:
#      - prometheus
#    volumes:
#      - ./metrics/data/grafana:/var/lib/grafana
#      - ./metrics/config/grafana/provisioning:/etc/grafana/provisioning
#      - ./metrics/config/grafana/grafana.ini:/etc/grafana/grafana.ini
#    env_file:
#      - .env
#    network_mode: "host"
#    #    ports:
#    #      - "3000:3000"
#    #    networks:
#    #      my_network:
#    #        ipv4_address: 172.28.0.18
#    restart: "no"
#

volumes:
  cache:
    driver: local

networks:
  my_network:
    name: seekers_network
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
