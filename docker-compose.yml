version: "3.8"

services:
  api:
    env_file:
      - .env
    depends_on:
      file_storage_service:
        condition: service_started
      user_service:
        condition: service_started
      auth_service:
        condition: service_started
      mail_service:
        condition: service_started
    volumes:
      - $GOPATH/pkg/mod:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    networks:
      my_network:
        ipv4_address: 172.28.0.2
    ports:
      - "8001:8001"
    restart: "no"

  db:
    env_file:
      - .env
    image: postgres:latest
    command: ["postgres",
              "-c", "log_directory=/var/log/postgresql",
#              "-c", "logging_collector=on",
              "-c", "log_statement=all"]
    networks:
      my_network:
        ipv4_address: 172.28.0.3
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ./scripts/sql:/docker-entrypoint-initdb.d
      - ./logs/postgres:/var/log/postgresql
    restart: "no"


  admin_db:
    env_file:
      - .env
    image: dpage/pgadmin4:latest
    networks:
      my_network:
        ipv4_address: 172.28.0.4
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: "no"

  cache:
    env_file:
      - .env
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      my_network:
        ipv4_address: 172.28.0.5
    volumes:
      - cache:/data
    restart: "no"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx-local-net.conf:/etc/nginx/nginx.conf
    networks:
      my_network:
        ipv4_address: 172.28.0.6
    depends_on:
      - api
    ports:
      - "443:443"
      - "80:80"
    restart: "no"

  file_storage_service:
    env_file:
      - .env
    volumes:
      - $GOPATH/pkg/mod:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/file_storage/Dockerfile
    networks:
      my_network:
        ipv4_address: 172.28.0.7
    ports:
      - "8005:8005"
    restart: "no"

  user_service:
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      file_storage_service:
        condition: service_started
    volumes:
      - $GOPATH/pkg/mod:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/user/Dockerfile
    networks:
      my_network:
        ipv4_address: 172.28.0.8
    ports:
      - "8006:8006"
    restart: "no"

  auth_service:
    env_file:
      - .env
    depends_on:
      user_service:
        condition: service_started
      cache:
        condition: service_started
    volumes:
      - $GOPATH/pkg/mod:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    networks:
      my_network:
        ipv4_address: 172.28.0.9
    ports:
      - "8007:8007"
    restart: "no"

  mail_service:
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      user_service:
        condition: service_started
    volumes:
      - $GOPATH/pkg/mod:/go/pkg/
      - ./logs/app:/app/logs/app
    build:
      context: .
      dockerfile: ./cmd/mail/Dockerfile
    networks:
      my_network:
        ipv4_address: 172.28.0.10
    ports:
      - "8008:8008"
    restart: "no"

volumes:
  cache:
    driver: local

networks:
  my_network:
    name: seekers_network
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
