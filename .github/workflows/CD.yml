name: CD

on:
  push:
    branches:
      - main
      - prod

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - uses: actions/checkout@v2
      - name: setup env
        run: |
          rm .env && touch .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }} >> .env
          echo POSTGRES_SSL_MODE=${{ secrets.POSTGRES_SSL_MODE }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
          echo S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} >> .env
          echo S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} >> .env
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
          echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
          echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
          echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env
          echo ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} >> .env
          echo GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }} >> .env
          echo GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }} >> .env
          echo GF_USERS_ALLOW_SIGN_UP=${{ secrets.GF_USERS_ALLOW_SIGN_UP }} >> .env
          echo EXTERNAL_USER_PASSWORD=${{ secrets.EXTERNAL_USER_PASSWORD }} >> .env
          echo SMTP_SECRET_PASSWORD=${{ secrets.SMTP_SECRET_PASSWORD }} >> .env
      - name: linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1
          make lint

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - uses: actions/checkout@v2
      - name: setup env
        run: |
          rm .env && touch .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }} >> .env
          echo POSTGRES_SSL_MODE=${{ secrets.POSTGRES_SSL_MODE }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
          echo S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} >> .env
          echo S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} >> .env
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
          echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
          echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
          echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env
          echo ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} >> .env
          echo GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }} >> .env
          echo GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }} >> .env
          echo GF_USERS_ALLOW_SIGN_UP=${{ secrets.GF_USERS_ALLOW_SIGN_UP }} >> .env
          echo EXTERNAL_USER_PASSWORD=${{ secrets.EXTERNAL_USER_PASSWORD }} >> .env
          echo SMTP_SECRET_PASSWORD=${{ secrets.SMTP_SECRET_PASSWORD }} >> .env
      - name: build
        run: go build -v ./...
      - name: tests
        run: make test

  deploy:
    needs: [ linter, tests ]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
        - name: stop backend
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.KEY }}
            script: |
              cd /home/ubuntu/backend/2023_1_Seekers
              make docker-stop-back
              make docker-prune 

        - name: update
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.KEY }}
            script: |
              cd /home/ubuntu/backend/2023_1_Seekers
              git checkout prod
              git pull

        - name: setup env
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.KEY }}
            script: |
              cd /home/ubuntu/backend/2023_1_Seekers
              rm .env && touch .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
              echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
              echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
              echo POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }} >> .env
              echo POSTGRES_SSL_MODE=${{ secrets.POSTGRES_SSL_MODE }} >> .env
              echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
              echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
              echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
              echo S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} >> .env
              echo S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} >> .env
              echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
              echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
              echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
              echo PGADMIN_CONFIG_SERVER_MODE=${{ secrets.PGADMIN_CONFIG_SERVER_MODE }} >> .env
              echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env
              echo ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} >> .env
              echo GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }} >> .env
              echo GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }} >> .env
              echo GF_USERS_ALLOW_SIGN_UP=${{ secrets.GF_USERS_ALLOW_SIGN_UP }} >> .env
              echo EXTERNAL_USER_PASSWORD=${{ secrets.EXTERNAL_USER_PASSWORD }} >> .env
              echo SMTP_SECRET_PASSWORD=${{ secrets.SMTP_SECRET_PASSWORD }} >> .env

        - name: build prod
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.KEY }}
            script: |
              cd /home/ubuntu/backend/2023_1_Seekers
              make build-prod

        - name: run front
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.KEY }}
            script: |
              cd /home/ubuntu/frontend/2023_1_Seekers
              ./build_script.sh     
